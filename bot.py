# -*- coding: utf-8 -*-
import logging
import json
import config # API, Users
from sm_h import RPI
import RPi.GPIO as GPIO
# cleanup
import signal
import sys
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


ALLOWED_PINS = list(range(2, 28))

# log level
logging.basicConfig(level=logging.INFO)

# bot init
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# pin init
def init_pin():
    with open("data.json", "r") as read:
        data = json.load(read)
    pins = list(data.values())
    RP = RPI(pins)
    GPIO.setwarnings(False)
    return RP
    

RP = init_pin()


# pin reinit
def reinit_pin():
    with open("data.json", "r") as read:
        data = json.load(read)
    pins = list(data.values())
    RP.re_init_pins(pins)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º. –ú–µ–Ω—è –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—å–∏ id –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–æ—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if message["from"]["id"] in config.USERS:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏", callback_data="rosettes"))
        keyboard.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ü–∏—è —Ä–æ–∑–µ—Ç–æ–∫", callback_data="redact_rosette"))
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å!", reply_markup=keyboard)
    else:
        await message.answer("–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ç–≤–æ–π id " + call["from"]["id"])


@dp.callback_query_handler(text="main")
async def process_start(call: types.CallbackQuery):
    if call["from"]["id"] in config.USERS:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏", callback_data="rosettes"))
        keyboard.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ü–∏—è —Ä–æ–∑–µ—Ç–æ–∫", callback_data="redact_rosette"))
        await call.message.edit_text("–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å!", reply_markup=keyboard)
    else:
        await call.message.edit_text("–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ç–≤–æ–π id " + call["from"]["id"])


@dp.callback_query_handler(text="rosettes")
async def send_rosettes(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    with open("data.json", "r") as read:
        data = json.load(read)
    if len(data) > 0:
        for i in data:
            status = RP.pin_status(data[i])
            if status == 1:
                keyboard.add(types.InlineKeyboardButton(text=i + " üåô", callback_data=i))
            elif status == 0:
                keyboard.add(types.InlineKeyboardButton(text=i + " üí°", callback_data=i))
    keyboard.add(types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"))
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑–µ—Ç–∫—É", reply_markup=keyboard)


@dp.callback_query_handler(text="redact_rosette")
async def redact_rosette(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑–µ—Ç–∫—É", callback_data="add_rosette"))
    keyboard.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑–µ—Ç–∫—É", callback_data="del_rosette"))
    keyboard.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ", callback_data="cleanup"))
    keyboard.add(types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main"))
    await call.message.edit_text("–†–µ–¥–∞—Ü–∫–∏—è —Ä–æ–∑–µ—Ç–æ–∫\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=keyboard)

# Cleanup
@dp.callback_query_handler(text="cleanup")
async def cleanuper(call: types.CallbackQuery):
    GPIO.cleanup()
    await call.answer(text="–ì–æ—Ç–æ–≤–æ! –ü–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã –≤ –∏–∑–Ω–æ—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", show_alert=True)


# Delete rosette
class DelRosetter(StatesGroup):
    Q1 = State() # –ò–º—è —Ä–æ–∑–µ—Ç–∫–∏

@dp.callback_query_handler(text="del_rosette")
async def enter_test(call: types.CallbackQuery):
    with open("data.json", "r", encoding='utf-8') as read:
        data = json.load(read)
    string = '\n'.join(data)
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n{string}")
    await DelRosetter.Q1.set()


@dp.message_handler(state=DelRosetter.Q1)
async def answer_del_q1(message: types.Message, state: FSMContext):
    answer = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏", callback_data="rosettes"))
    keyboard.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ü–∏—è —Ä–æ–∑–µ—Ç–æ–∫", callback_data="redact_rosette"))

    with open("data.json", "r", encoding='utf-8') as read:
        data = json.load(read)

    if answer in data:
        del data[answer]
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4, sort_keys=True)
        await message.answer("–†–æ–∑–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)
        await state.finish()
        reinit_pin()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è —Ä–æ–∑–µ—Ç–∫–∏!", reply_markup=keyboard)
        await state.finish()


# Add rosette
class AddRosetter(StatesGroup):
    Q1 = State() # –ò–º—è —Ä–æ–∑–µ—Ç–∫–∏
    Q2 = State() # –ù–æ–º–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–∏–Ω–∞


@dp.callback_query_handler(text="add_rosette")
async def enter_test(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∏")
    await AddRosetter.Q1.set()


@dp.message_handler(state=AddRosetter.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∏–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    await AddRosetter.next()

@dp.message_handler(state=AddRosetter.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data = await state.get_data()
    ans1 = data.get("answer1")
    ans2 = message.text

    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–¥–∏–º –∫–Ω–æ–ø–∫–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏", callback_data="rosettes"))
    keyboard.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ü–∏—è —Ä–æ–∑–µ—Ç–æ–∫", callback_data="redact_rosette"))

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    try:
        ans2 = int(ans2)
    except:
        pass

    with open("data.json", "r") as read:
        data = json.load(read)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–∑–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –ø–∏–Ω–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if ans1 in data or ans2 in list(data.values()):
        await message.answer("–†–æ–∑–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –ø–∏–Ω–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=keyboard)

    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –ø–∏–Ω–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    elif not ans2 in ALLOWED_PINS:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø–∏–Ω", reply_markup=keyboard)
    
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ä–æ–∑–µ—Ç–∫—É
        data[ans1] = int(ans2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ json
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4, sort_keys=True)
        
        reinit_pin()
        await message.answer("–†–æ–∑–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler()
async def add_rosette(call: types.CallbackQuery):
    with open("data.json", "r") as read:
        data = json.load(read)
    if call["data"] in data:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="on_" + call["data"]))
        keyboard.add(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="off_" + call["data"]))
        keyboard.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–∫–∞–º–∏", callback_data="rosettes"))
        await call.message.edit_text("–†–æ–∑–µ—Ç–∫–∞ " + call["data"], reply_markup=keyboard)
    elif call["data"][:3] == "on_":
        if RP.pin_off(data[call["data"][3:]]):
            print("Pin {} enabled".format(data[call["data"][3:]]))
            await call.answer(text="–†–æ–∑–µ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞", show_alert=True)
    elif call["data"][:4] == "off_":
        if RP.pin_on(data[call["data"][4:]]):
            print("Pin {} disabled".format(data[call["data"][4:]]))
            await call.answer(text="–†–æ–∑–µ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", show_alert=True)


# Cleanup
def signal_handler(signal, frame):
    print('You pressed Ctrl+C - or killed me with -2')
    GPIO.cleanup()
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)